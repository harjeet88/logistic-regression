import sigmoid as sg
import numpy as np
def costFunction(theta, X, Y) :
	#p_1 = sg.sigmoid(np.dot(X, theta)) # predicted probability of label 1
	#log_l = (-Y)*np.log(p_1) - (1-Y)*np.log(1-p_1)
	#print 'log mean'	
	#print log_l.mean()

	#print theta.shape
	
#	h = sg.sigmoid(np.dot(X,theta))
	
#	print h
	
#	temp1 = (- Y) * np.log(h)
#	temp2 = -((1-Y) * np.log(1-h))

#	cost = (temp1 + temp2)

	#Sprint temp1
	
	#grad = (X' * (sigmoid(X * theta) - y)) * (1/m);
	
 
	#grad = (X' * (sigmoid(X * theta) - y)) * (1/m);
	
	h = sg.sigmoid(np.dot(X,theta));
	#print np.log(1-h)	
	
	#cost = (-Y.T.dot(np.log(h)) - (1 - Y).T.dot(np.log(1 - h)))
	#print np.log(h)
	cost = -1*np.dot(np.log(h).T,Y)-np.dot((1-Y).T,np.log(1-h))	
	#cost = -1 - Y*(np.log(h) - np.log(1-h) )
	#J = (1./m) * (-transpose(y).dot(log(sigmoid(X.dot(theta)))) - transpose(1-y).dot(log(1-sigmoid(X.dot(theta)))))	
	
	
	#grad = ((sg.sigmoid(X.dot(theta)).T - Y).dot(X)).T
	
	
	return cost.mean()/y.size


